changes in data-staging-feature

* add data staging feature

The data staging feature is based on Globus SDK for Python and uisng
this feature requires Globus account and access to both ends of transfer.
Please refer to https://www.globus.org/ for more information about Globus.
This feature enables users to specify arguments related to staging in
and/or staging out and then Cobalt could transfer data before a job
starts, monitor transfer progress, notify users to alter arguments if
transfers fail, and optionally stage result out upon job completion.

For system administers, data staging feature requires Globus SDK for Python.
Please refer to http://globus.github.io/globus-sdk-python/. Also, administers
can switch off data staging feature by editing "stage" section in cobalt.conf
file. Setting "allow_dat_staging" to false disable data staging feature, while
setting it to true enable this feature. If the system turns off data staging
feature, any jobs trying to use this feature will be killed.

For users, make sure the involved endpoints are in "ready" or "in use"
state before job submission. Endpoints' status can be found at
https://www.globus.org/app/endpoints. The arguments for data staging
should be specified when users submit jobs. One example is

qsub -t 5 -n 512 --attrs stage_config_file=/path/to/config_file <executable>

The value of the attribute stage_config_file is the path to the data staging
file. One example of stage_config_file is

[general]
transfer_token = transfer-token

[stagein]
stagein_src = /path/to/file1,/path/to/dir1
stagein_des = /path/to/file2,/path/to/dir2
stagein_endpoint_from = stagein-source-endpoint-id
stagein_endpoint_to = stagein-destination-endpoint-id
stagein_type = file,dir

[stageout]
stageout_src = /path/to/file3,/path/to/dir3
stageout_des = /path/to/file4,/path/to/dir4
stageout_endpoint_from = stageout-source-endpoint-id
stageout_endpoint_to = stageout-source-endpoint-id
stageout_type = file,dir



transfer_token is required and it allows system to transfer files on users
behalf. One can get his transfer_token from https://tokens.globus.org

stagein and stageout sections are both optional. Stagein section allows one
to transfer data before job starts and stageout section allows one to transfer
data upon job completion. You can either have one section or both sections.

Arguments in stagein and stageout sections are similar. Take stagein section
for example. stagein_src is the source files or directories to transfer.
stagein_des is the destination files or directories. stagein_type can be file
or dir. You can transfer more than one files and directories and each file or
directory is separated by comma. stagein_endpoint_from is the source endpoint
uuid and stagein_endpoint_to is the destination endpoint uuid. Endpoints uuid
can be found at https://www.globus.org/app/endpoints


After staging in process starts, cobalt periodically pulls the status of
transfer from Globus and the job is in trans_hold state. trans_hold releases
when transfer succeeds. However, if the transfer fails, this job jumps to
trans_fail state. In this case, one have to modify stage_config_file and then
submit the changes using 'qalter' command, which triggers cobalt to initiate
a new transfer. One exmaple of qalter command is

qalter --attrs stage_config_file=/path/to/config_file <jobid>

Similar to qsub command, stage_config_file is the path to the data staging
configuration file.


Staging out process is different from staging in process. Cobalt only initiates
data transfer if a job exit with code 0 and Cobalt only initiates transfer
once and do not monitor the transfer status. If the transfer fails, one have to
transfer data out manually.
